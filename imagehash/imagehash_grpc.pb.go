// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: imagehash.proto

package imagehash

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImagehashService_GetHash_FullMethodName = "/imagehash.ImagehashService/GetHash"
)

// ImagehashServiceClient is the client API for ImagehashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagehashServiceClient interface {
	GetHash(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GetHashRequest, GetHashResponse], error)
}

type imagehashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImagehashServiceClient(cc grpc.ClientConnInterface) ImagehashServiceClient {
	return &imagehashServiceClient{cc}
}

func (c *imagehashServiceClient) GetHash(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GetHashRequest, GetHashResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImagehashService_ServiceDesc.Streams[0], ImagehashService_GetHash_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetHashRequest, GetHashResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImagehashService_GetHashClient = grpc.ClientStreamingClient[GetHashRequest, GetHashResponse]

// ImagehashServiceServer is the server API for ImagehashService service.
// All implementations must embed UnimplementedImagehashServiceServer
// for forward compatibility.
type ImagehashServiceServer interface {
	GetHash(grpc.ClientStreamingServer[GetHashRequest, GetHashResponse]) error
	mustEmbedUnimplementedImagehashServiceServer()
}

// UnimplementedImagehashServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImagehashServiceServer struct{}

func (UnimplementedImagehashServiceServer) GetHash(grpc.ClientStreamingServer[GetHashRequest, GetHashResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetHash not implemented")
}
func (UnimplementedImagehashServiceServer) mustEmbedUnimplementedImagehashServiceServer() {}
func (UnimplementedImagehashServiceServer) testEmbeddedByValue()                          {}

// UnsafeImagehashServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagehashServiceServer will
// result in compilation errors.
type UnsafeImagehashServiceServer interface {
	mustEmbedUnimplementedImagehashServiceServer()
}

func RegisterImagehashServiceServer(s grpc.ServiceRegistrar, srv ImagehashServiceServer) {
	// If the following call pancis, it indicates UnimplementedImagehashServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImagehashService_ServiceDesc, srv)
}

func _ImagehashService_GetHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImagehashServiceServer).GetHash(&grpc.GenericServerStream[GetHashRequest, GetHashResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImagehashService_GetHashServer = grpc.ClientStreamingServer[GetHashRequest, GetHashResponse]

// ImagehashService_ServiceDesc is the grpc.ServiceDesc for ImagehashService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImagehashService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imagehash.ImagehashService",
	HandlerType: (*ImagehashServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHash",
			Handler:       _ImagehashService_GetHash_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "imagehash.proto",
}
